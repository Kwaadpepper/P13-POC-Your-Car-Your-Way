[versions]
java = "21"
spring-boot = "3.5.4"
spring-cloud = "2025.0.0"
error-prone = "2.41.0"
nullaway = "0.12.8"
errorprone-plugin = "4.2.0"
spotless = "7.2.1"
ktlint = "1.7.1"
google-java-format = "1.17.0"
checkstyle = "11.0.0"
jdt-annotation-version = "2.2.600"
rabbitmq-amqp-client = "5.26.0"
slf4j-api = "2.0.17"
datafaker-version = "2.4.4"
jsonwebtoken-jjwt-version = "0.12.6"

[libraries]
spring-boot-dependencies = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "spring-boot" }
spring-cloud-dependencies = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "spring-cloud" }
spring-context = { module = "org.springframework:spring-context" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-security-core = { module = "org.springframework.security:spring-security-core" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-amqp = { module = "org.springframework.boot:spring-boot-starter-amqp" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server" }
spring-cloud-starter-openfeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign" }
spring-cloud-starter-config = { module = "org.springframework.cloud:spring-cloud-starter-config" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
eclipse-jdt-annotation = { module = "org.eclipse.jdt:org.eclipse.jdt.annotation", version.ref = "jdt-annotation-version" }
errorprone-core = { module = "com.google.errorprone:error_prone_core", version.ref = "error-prone" }
nullaway = { module = "com.uber.nullaway:nullaway", version.ref = "nullaway" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
postgresql = { module = "org.postgresql:postgresql" }
rabbitmq-amqpclient = { module = "com.rabbitmq:amqp-client", version.ref = "rabbitmq-amqp-client" }
slf4j-api = { module = "org.slf4j:slf4j-api" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
logback-classic = { module = "ch.qos.logback:logback-classic" }
datafaker = { module = "net.datafaker:datafaker", version.ref = "datafaker-version" }
flyway-core = { module = "org.flywaydb:flyway-core" }
flyway-postgres = { module = "org.flywaydb:flyway-database-postgresql" }
jsonwebtoken-jjwt-api = { module = "io.jsonwebtoken:jjwt-api", version.ref = "jsonwebtoken-jjwt-version" }
jsonwebtoken-jjwt-impl = { module = "io.jsonwebtoken:jjwt-impl", version.ref = "jsonwebtoken-jjwt-version" }
jsonwebtoken-jjwt-jackson = { module = "io.jsonwebtoken:jjwt-jackson", version.ref = "jsonwebtoken-jjwt-version" }

[plugins]
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
errorprone = { id = "net.ltgt.errorprone", version.ref = "errorprone-plugin" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
checkstyle = { id = "checkstyle" }
