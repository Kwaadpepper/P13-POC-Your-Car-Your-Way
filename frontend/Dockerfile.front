# ===== Base (deps + bun) =====
FROM node:22.12-alpine AS base
WORKDIR /workspace

# Bun depuis l'image officielle (couche en cache)
ARG BUN_VERSION=1.2.19
COPY --from=oven/bun:${BUN_VERSION}-alpine /usr/local/bin/bun /usr/local/bin/bun

# Manifeste + lockfiles (max cache)
COPY package.json ./
COPY bun.lock* bun.lockb* pnpm-lock.yaml* yarn.lock* package-lock.json* ./

# Dépendances locales (file:) nécessaires à l'install
COPY projects/shared ./projects/shared

# Installer les deps
RUN bun install --frozen-lockfile

# Désactive la télémétrie Angular en CI
ENV NG_CLI_ANALYTICS=false

# ===== Builder la librairie shared une fois =====
FROM base AS shared-builder
ARG CONFIG="production"

# Code pour la librairie
COPY . .
# 1) Build de la lib shared
RUN bun x ng build shared --configuration "$CONFIG"

# ===== Builder Angular pour les apps =====
FROM base AS ng-builder
ARG PROJECT="shell"
ARG CONFIG="production"

# 1) Copier le build de la lib shared depuis l'étape `shared-builder`
COPY --from=shared-builder /workspace/dist/shared /workspace/dist/shared

# 2) Code de l’app cible
COPY . .

# 3) Build de l’app cible
RUN bun x ng build "$PROJECT" --configuration "$CONFIG"

# ===== Runtime Nginx =====
FROM nginx:1.27-alpine AS ng-runtime
ARG PROJECT="shell"

# Conf Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Crée le dossier html, copie la sortie Angular en gérant les 2 layouts possibles
RUN mkdir -p /usr/share/nginx/html
COPY --from=ng-builder /workspace/dist/${PROJECT} /tmp/dist
RUN if [ -d /tmp/dist/browser ]; then \
      cp -a /tmp/dist/browser/. /usr/share/nginx/html/; \
    else \
      cp -a /tmp/dist/. /usr/share/nginx/html/; \
    fi
